from agent import Agent
import random
import math
import numpy as np
import matplotlib.pyplot as plt
import time
import os
import warnings

# ------------ tackle some noisy warning
def warn(*args, **kwargs):
    pass
warnings.warn = warn
warnings.simplefilter(action="ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category = DeprecationWarning)

'''
TF_CPP_MIN_LOG_LEVEL = 0 to all logs .
TF_CPP_MIN_LOG_LEVEL = 1 to filter out INFO logs 
TF_CPP_MIN_LOG_LEVEL = 2 to additionall filter out WARNING 
TF_CPP_MIN_LOG_LEVEL = 3 to additionally filter out ERROR.
'''
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense


WEIGHT1 = np.array([[1.391957849264144897e-01,7.938511371612548828e-01,5.405380725860595703e-01,-8.127994537353515625e-01,3.429547324776649475e-02,-6.969232857227325439e-02,-2.939802408218383789e-01,-1.997222751379013062e-01,2.974384725093841553e-01,4.603224396705627441e-01,1.690422594547271729e-01,5.662263035774230957e-01,-2.224843651056289673e-01,-2.014883607625961304e-01,2.677792916074395180e-03,1.666431576013565063e-01,6.198672652244567871e-01,-1.170891374349594116e-01,-2.342341393232345581e-01,6.509296298027038574e-01,2.008105516433715820e+00,1.502924561500549316e-01,1.694446444511413574e+00,-1.435802727937698364e-01,4.192330241203308105e-01,-1.966393887996673584e-01],
[-3.689894378185272217e-01,1.840692758560180664e-01,-3.373371437191963196e-02,-4.983517825603485107e-01,-4.872979223728179932e-01,4.740262925624847412e-01,-3.025706112384796143e-01,-1.083513721823692322e-01,8.384078741073608398e-01,1.637217998504638672e-01,-1.573665440082550049e-01,5.921074748039245605e-01,4.271294921636581421e-02,2.011477202177047729e-01,-2.093340158462524414e-01,3.249661624431610107e-02,3.659174740314483643e-01,5.585270524024963379e-01,-7.262575626373291016e-01,3.324770629405975342e-01,1.989136219024658203e+00,2.840320765972137451e-01,3.531296491622924805e+00,-7.041013985872268677e-02,-1.950852775573730469e+01,-6.624210625886917114e-02],
[-1.580855548381805420e-01,9.900601506233215332e-01,8.980668336153030396e-02,3.822828829288482666e-01,2.509864866733551025e-01,6.004295945167541504e-01,5.759706720709800720e-02,-1.550062894821166992e-01,1.311743140220642090e+00,6.136457324028015137e-01,3.516682684421539307e-01,3.484021872282028198e-02,3.573400666937232018e-03,2.118729829788208008e+00,3.855559229850769043e-01,-2.827711999416351318e-01,1.279094099998474121e+00,1.046996116638183594e+00,5.281744003295898438e-01,9.979153275489807129e-01,1.641187429428100586e+00,5.266989469528198242e-01,5.251472473144531250e+00,-1.142960929870605469e+01,-7.141249656677246094e+00,-2.214679419994354248e-01],
[1.749749630689620972e-01,8.938612937927246094e-01,3.323859870433807373e-01,-2.566627979278564453e+00,-3.302680552005767822e-01,3.413209915161132812e-01,2.588543295860290527e-02,8.199574053287506104e-02,-4.794203341007232666e-01,2.312283366918563843e-01,1.104515120387077332e-01,4.756329953670501709e-01,7.722926884889602661e-02,-1.316702246665954590e+00,5.744341611862182617e-01,-1.506446152925491333e-01,-1.448225259780883789e+00,5.281158164143562317e-02,8.079079985618591309e-01,4.978146851062774658e-01,-2.549334764480590820e-01,2.224197834730148315e-01,2.478671073913574219e-01,-8.091537475585937500e+00,-3.477115392684936523e+00,-1.377658098936080933e-01],
[-2.081435769796371460e-01,5.006721615791320801e-01,8.340976387262344360e-02,4.864418804645538330e-01,-4.511704146862030029e-01,1.738397479057312012e-01,1.274860948324203491e-01,2.916497945785522461e+00,3.559992015361785889e-01,3.829502463340759277e-01,-2.865150272846221924e-01,-7.383538037538528442e-02,2.353329509496688843e-01,-1.342165946960449219e+00,2.395293563604354858e-01,-2.744954526424407959e-01,1.326126813888549805e+00,3.247498869895935059e-01,3.047633469104766846e-01,-3.596012294292449951e-01,-1.513442277908325195e+00,2.158468356356024742e-03,2.743244886398315430e+00,-2.347477972507476807e-01,1.005199313163757324e+00,-2.169626951217651367e-01],
[1.041365507990121841e-02,2.105454921722412109e+00,-2.176943016052246094e+01,-1.041669082641601562e+01,-6.849914044141769409e-02,2.945625483989715576e-01,-2.374857105314731598e-02,1.294959306716918945e+00,-5.119142532348632812e-01,6.392689347267150879e-01,2.342212498188018799e-01,1.850970536470413208e-01,3.983407616615295410e-01,-2.345500737428665161e-01,6.680591702461242676e-01,6.157942116260528564e-02,7.481779456138610840e-01,9.776846766471862793e-01,1.011698484420776367e+00,1.075194478034973145e+00,-1.767542958259582520e-01,-1.444186419248580933e-01,3.069712638854980469e+00,-4.891595244407653809e-01,2.508137747645378113e-02,6.727398931980133057e-02],
[-6.982713192701339722e-02,2.184961557388305664e+00,-4.950750827789306641e+00,-2.990946292877197266e+00,-1.885470747947692871e-01,4.922983646392822266e-01,-1.097859814763069153e-01,1.879268884658813477e+00,-8.059911727905273438e-01,1.684008240699768066e-01,-7.684805989265441895e-01,8.818621635437011719e-01,2.418032288551330566e-01,-8.355167508125305176e-01,3.760136961936950684e-01,-6.870976835489273071e-02,1.897609710693359375e+00,-1.830511987209320068e-01,-9.556659698486328125e+00,6.416402012109756470e-02,5.227504372596740723e-01,-7.767329365015029907e-02,2.445964097976684570e+00,6.837211847305297852e-01,4.537445306777954102e-01,3.285177350044250488e-01],
[8.253822103142738342e-03,-1.327119916677474976e-01,-3.426125526428222656e+00,-2.782430171966552734e+00,-5.395569652318954468e-02,-1.335584282875061035e+00,-1.269730478525161743e-01,1.380490899085998535e+00,-8.705865859985351562e+00,4.626102745532989502e-01,-2.597588114440441132e-02,6.848727464675903320e-01,-2.166632711887359619e-01,1.564014077186584473e+00,6.889743357896804810e-02,-9.876004606485366821e-02,4.989018738269805908e-01,-9.688066244125366211e-01,-5.175749301910400391e+00,1.131952553987503052e-01,-1.833089254796504974e-02,1.036893352866172791e-01,1.825049966573715210e-01,7.995281219482421875e-01,5.650818347930908203e-01,4.945797845721244812e-02],
[1.649732701480388641e-02,-6.081096529960632324e-01,-3.456350564956665039e-01,7.869799733161926270e-01,1.267735660076141357e-01,-2.307645082473754883e-01,-3.607507050037384033e-02,-7.848139405250549316e-01,1.193057820200920105e-01,-2.150617390871047974e-01,1.504189521074295044e-01,-8.877432346343994141e-01,2.096194773912429810e-01,-6.918743252754211426e-01,-1.319984048604965210e-01,-8.478095382452011108e-02,-2.374108582735061646e-01,-5.816186591982841492e-02,4.827918112277984619e-01,-9.795773774385452271e-02,-2.390547037124633789e+00,-3.595270812511444092e-01,2.538783073425292969e+00,-4.840436577796936035e-01,1.675594598054885864e-01,4.816743358969688416e-02],
[-2.353772073984146118e-01,-5.825868248939514160e-01,-4.593533277511596680e-01,9.547371864318847656e-01,-2.084652781486511230e-01,-2.271372795104980469e+01,-2.905829437077045441e-02,-5.174008011817932129e-01,5.242929607629776001e-02,2.956221103668212891e-01,1.391382366418838501e-01,-1.056080460548400879e+00,5.053290128707885742e-01,-3.349197804927825928e-01,-2.096490934491157532e-02,-3.355385065078735352e-01,-7.199918031692504883e-01,-6.152888536453247070e-01,1.748223602771759033e-01,-2.304151952266693115e-01,-2.268002748489379883e+00,-1.893597394227981567e-01,3.177839756011962891e+00,2.389685809612274170e-01,-2.442792057991027832e-01,1.635504327714443207e-02],
[-4.107220470905303955e-01,2.177931070327758789e-01,-5.485230311751365662e-02,1.422963976860046387e+00,1.704709678888320923e-01,-8.373165130615234375e+00,-2.723268866539001465e-01,2.100470066070556641e-01,2.589690685272216797e-01,-3.495821654796600342e-01,1.997015029191970825e-01,2.667922377586364746e-01,-1.487493705749511719e+01,1.437619209289550781e+00,-1.064358837902545929e-02,2.107232064008712769e-01,-4.084343463182449341e-02,-4.975470602512359619e-01,7.908396720886230469e-01,5.026646256446838379e-01,-1.677819728851318359e+00,3.649655282497406006e-01,5.799421310424804688e+00,2.450195699930191040e-01,2.438266016542911530e-02,1.453500986099243164e-01],
[-1.185646206140518188e-01,1.415806770324707031e+00,1.524786353111267090e-01,-8.143475055694580078e-01,8.261498063802719116e-02,-3.734875917434692383e+00,6.352349370718002319e-02,3.848364949226379395e-01,-4.458067715167999268e-01,-3.569353818893432617e-01,5.745791792869567871e-01,8.772463202476501465e-01,-1.065104961395263672e+01,-1.298776626586914062e+00,3.984265923500061035e-01,1.057550758123397827e-01,9.003092050552368164e-01,-5.340898036956787109e-01,1.380176782608032227e+00,-7.308791875839233398e-01,-3.004158735275268555e+00,3.515095710754394531e-01,7.022154331207275391e-01,1.155651211738586426e-01,-4.856680035591125488e-01,-2.339479029178619385e-01],
[4.970448464155197144e-02,-1.302643775939941406e+00,4.829024523496627808e-02,1.388946413993835449e+00,-2.058459818363189697e-01,2.608703635632991791e-02,5.735157430171966553e-02,1.302347034215927124e-01,-5.216864943504333496e-01,4.803236946463584900e-02,6.639257669448852539e-01,-6.109776496887207031e-01,-8.448447585105895996e-01,2.542976438999176025e-01,-9.795866906642913818e-02,6.387874484062194824e-02,-4.385167658329010010e-01,-4.518744647502899170e-01,7.549779415130615234e-01,-2.072896808385848999e-01,1.103604555130004883e+00,4.363034963607788086e-01,1.621232509613037109e+00,-6.924061775207519531e-01,2.579357624053955078e-01,1.400001198053359985e-01],
[1.632595509290695190e-01,1.548975706100463867e-01,6.652167439460754395e-01,7.320715785026550293e-01,2.063125818967819214e-01,4.316351413726806641e-01,1.395858451724052429e-02,-1.614220142364501953e+00,-6.429251283407211304e-02,-1.998535096645355225e-01,-1.861730957031250000e+01,3.404108881950378418e-01,-9.625645875930786133e-01,4.395015835762023926e-01,4.205399155616760254e-01,2.921803668141365051e-02,-4.501584470272064209e-01,6.178852319717407227e-01,4.556173980236053467e-01,3.095794022083282471e-01,4.204720258712768555e-01,2.404232919216156006e-01,4.244685649871826172e+00,7.306573987007141113e-01,-5.166957974433898926e-01,7.775116562843322754e-01],
[-4.523240029811859131e-01,1.304949074983596802e-01,-2.588118314743041992e-01,9.968209862709045410e-01,-2.635032534599304199e-01,-1.538696289062500000e-01,-8.568828925490379333e-03,-2.496318817138671875e+00,6.512902379035949707e-01,-4.861951768398284912e-01,-4.129277229309082031e+00,4.538504779338836670e-01,-2.616356015205383301e-01,-7.946090102195739746e-01,-1.400186717510223389e-01,2.130731344223022461e-01,7.559902667999267578e-01,-1.649966049194335938e+01,4.449754059314727783e-01,-1.963132917881011963e-01,-8.184549212455749512e-01,-5.862023830413818359e-01,1.020665287971496582e+00,3.879244327545166016e-01,-4.468674957752227783e-01,1.812159568071365356e-01],
[1.186832264065742493e-01,-1.754537582397460938e+00,-9.002734422683715820e-01,1.203933134675025940e-01,-1.378439217805862427e-01,-8.018036484718322754e-01,-6.222553551197052002e-02,-2.079555988311767578e+00,-1.489718705415725708e-01,2.324081361293792725e-01,-3.117546796798706055e+00,-4.822758436203002930e-01,9.904853105545043945e-01,1.705112814903259277e+00,-4.313252568244934082e-01,3.756614401936531067e-02,2.521250545978546143e-01,-4.603065013885498047e+00,-4.608076810836791992e-01,-4.752729535102844238e-01,-2.404290288686752319e-01,-8.105613589286804199e-01,-1.398800492286682129e+00,-7.848014831542968750e-01,3.644245564937591553e-01,5.057426095008850098e-01],
[-2.363378703594207764e-01,2.945509850978851318e-01,4.549612402915954590e-01,1.890628337860107422e-01,1.208874359726905823e-01,-1.753885447978973389e-01,-3.478261530399322510e-01,-4.685975015163421631e-01,-3.059734106063842773e-01,7.338018417358398438e-01,2.188906818628311157e-01,4.463628530502319336e-01,1.855672895908355713e-01,9.894533753395080566e-01,4.177175462245941162e-01,-3.372454047203063965e-01,7.287859916687011719e-01,1.000624895095825195e+00,-7.127851247787475586e-03,-5.020787119865417480e-01,2.230505704879760742e+00,-2.775579094886779785e-01,1.211949735879898071e-01,3.913948535919189453e-01,8.754366636276245117e-02,5.101376771926879883e-01],
[-2.994472384452819824e-01,-1.894174367189407349e-01,7.482670247554779053e-02,-1.761745095252990723e+00,-1.648226380348205566e-01,2.196065783500671387e-01,-5.236111581325531006e-02,-2.221898585557937622e-01,3.631044626235961914e-01,4.236949384212493896e-01,2.601996660232543945e-01,1.750555820763111115e-02,-6.857922673225402832e-01,3.272407948970794678e-01,-3.343221843242645264e-01,1.722121238708496094e-01,-5.613432526588439941e-01,4.593002498149871826e-01,-5.622087121009826660e-01,4.068763256072998047e-01,1.399814844131469727e+00,-2.221680831909179688e+01,4.586704671382904053e-01,2.827220857143402100e-01,7.032842636108398438e-01,-1.165840923786163330e-01],
[1.138875856995582581e-01,-1.423189759254455566e+00,2.822786867618560791e-01,1.325909048318862915e-01,-1.896843165159225464e-01,9.238103032112121582e-01,-2.568840086460113525e-01,9.225589632987976074e-01,4.972558915615081787e-01,8.659272193908691406e-01,6.785460114479064941e-01,3.054563701152801514e-01,-2.757355570793151855e-01,1.843265533447265625e+00,2.979113161563873291e-01,-1.920546591281890869e-01,-6.138293743133544922e-01,4.895736873149871826e-01,-2.263959050178527832e-01,-1.316936588287353516e+01,8.824371695518493652e-01,-8.800498962402343750e+00,4.777441024780273438e-01,5.293537378311157227e-01,1.371905207633972168e-01,1.978085339069366455e-01],
[4.861106351017951965e-02,1.164963603019714355e+00,-3.604281246662139893e-01,-4.567880332469940186e-01,-9.915369749069213867e-02,4.734072983264923096e-01,-3.681169748306274414e-01,1.119984984397888184e+00,5.940008163452148438e-01,5.590065717697143555e-01,1.202418208122253418e-01,2.195942640304565430e+00,1.402405977249145508e+00,-1.458731532096862793e+00,2.957141101360321045e-01,-2.729186415672302246e-01,-1.016591042280197144e-01,3.343510031700134277e-01,6.149764358997344971e-02,-1.428382587432861328e+01,-6.762897968292236328e-01,-4.812819957733154297e+00,-2.967871665954589844e+00,1.021288111805915833e-01,2.543123960494995117e-01,-4.020691215991973877e-01],
[-3.982952535152435303e-01,7.604110836982727051e-01,-7.258135080337524414e-02,-1.494957059621810913e-01,-8.716438710689544678e-02,-2.782998681068420410e-01,-1.631203740835189819e-01,2.121104001998901367e+00,2.192143052816390991e-01,7.044994831085205078e-01,-2.278977781534194946e-01,-4.994609951972961426e-01,1.056247234344482422e+00,-1.977730393409729004e-01,4.213709384202957153e-02,-2.839792370796203613e-01,9.721798300743103027e-01,4.325155317783355713e-01,-4.464806616306304932e-02,-5.754629522562026978e-02,-6.143150329589843750e-01,-1.094129756093025208e-01,3.517480373382568359e+00,3.179526329040527344e-01,-4.480955004692077637e-02,-3.796716928482055664e-01],
[-1.094786971807479858e-01,8.107228279113769531e-01,-1.070520058274269104e-01,-8.485002070665359497e-02,-2.047678679227828979e-01,6.472311913967132568e-02,-6.829164177179336548e-02,1.157695174217224121e+00,7.393985986709594727e-01,-1.629986572265625000e+01,-9.832543879747390747e-02,-3.662204742431640625e-01,1.562881588935852051e+00,-5.976739153265953064e-02,-2.653063833713531494e-02,1.732902973890304565e-01,-2.466207444667816162e-01,5.514451861381530762e-01,-2.094695568084716797e-01,4.975247979164123535e-01,-3.634670674800872803e-01,-2.434609457850456238e-02,1.907263159751892090e+00,3.163690268993377686e-01,1.709422022104263306e-01,-1.198786199092864990e-01],
[-1.345566809177398682e-01,1.837786912918090820e+00,2.973165810108184814e-01,6.322118639945983887e-01,-7.184509187936782837e-02,-6.760619282722473145e-01,-2.990246415138244629e-01,-1.311983227729797363e+00,2.644106447696685791e-01,-5.868662357330322266e+00,3.983289301395416260e-01,-1.481873893737792969e+01,1.059186577796936035e+00,-3.885654807090759277e-01,3.832380473613739014e-01,-1.695056855678558350e-01,3.629558682441711426e-01,6.023496985435485840e-01,-8.518068790435791016e-01,5.897756218910217285e-01,-1.897506713867187500e+00,1.993863731622695923e-01,3.311731338500976562e+00,3.531267940998077393e-01,9.838125854730606079e-02,-2.882143855094909668e-02],
[1.852893270552158356e-02,-3.189400434494018555e-01,1.854627579450607300e-01,-6.380404233932495117e-01,-1.014645844697952271e-01,9.233165532350540161e-02,-2.091376110911369324e-02,-1.790035963058471680e+00,-1.214894279837608337e-01,-2.556423187255859375e+00,-4.506426453590393066e-01,-3.958566665649414062e+00,1.104859352111816406e+00,9.437569379806518555e-01,-3.312826752662658691e-01,-3.396851718425750732e-01,-4.095572233200073242e-02,2.921217083930969238e-01,2.402563393115997314e-01,-1.166942343115806580e-01,-3.157119154930114746e-01,-4.376543164253234863e-01,-5.991269946098327637e-01,-1.047920882701873779e-01,1.935791820287704468e-01,-2.481308579444885254e-01],
[-4.255786910653114319e-02,3.713464736938476562e-01,6.510854363441467285e-01,9.816209673881530762e-01,5.130954831838607788e-02,1.979458928108215332e-01,-1.562746055424213409e-02,1.611489057540893555e+00,5.650113821029663086e-01,-1.199333742260932922e-02,-2.616360783576965332e-01,-9.082737565040588379e-01,1.577512621879577637e-01,1.980000615119934082e+00,-3.453532159328460693e-01,-2.866441607475280762e-01,-6.348462104797363281e-01,-9.622442126274108887e-01,6.050191521644592285e-01,-5.588641166687011719e-01,-2.762497186660766602e+00,1.643200814723968506e-01,4.692048072814941406e+00,5.207647681236267090e-01,-1.598338335752487183e-01,-1.485915039665997028e-03],
[-2.746082544326782227e-01,-1.405077576637268066e-01,2.041469365358352661e-01,7.322048395872116089e-02,2.290718406438827515e-01,2.831277251243591309e-01,8.960931748151779175e-02,1.194112822413444519e-01,9.662164747714996338e-02,-1.059146285057067871e+00,8.116614073514938354e-02,3.105719387531280518e-01,8.148359060287475586e-01,1.689741253852844238e+00,-2.023562622070312500e+01,-1.001240238547325134e-01,1.215587183833122253e-01,-4.011676311492919922e-01,8.738530874252319336e-01,-8.419201374053955078e-01,-2.448728322982788086e+00,2.935315109789371490e-02,3.906557321548461914e+00,-6.954176723957061768e-02,-4.396067559719085693e-01,-2.607572972774505615e-01],
[2.437818199396133423e-01,-1.361728072166442871e+00,5.119363069534301758e-01,6.862002015113830566e-01,-5.726806074380874634e-02,8.411032557487487793e-01,3.051133267581462860e-02,-3.663450479507446289e-01,-3.334453403949737549e-01,-1.080027818679809570e-01,-2.081572115421295166e-01,8.539439737796783447e-02,4.403786361217498779e-01,1.859164953231811523e+00,-1.019861030578613281e+01,-9.867148846387863159e-02,-1.094468975067138672e+01,-4.587988853454589844e-01,1.079553365707397461e+00,-3.869147002696990967e-01,-2.528972148895263672e+00,1.558026671409606934e-01,3.515163898468017578e+00,6.152108907699584961e-01,-2.006575316190719604e-01,4.330281317234039307e-01],
[7.007004320621490479e-02,2.100579023361206055e+00,4.327150583267211914e-01,1.751321434974670410e+00,-1.769448071718215942e-01,-3.014129698276519775e-01,1.991069167852401733e-01,-1.040509939193725586e+00,-2.898552417755126953e-01,-3.585200011730194092e-01,-3.154203891754150391e-01,-1.062690854072570801e+00,-7.026380300521850586e-01,-8.620133399963378906e-01,-4.972872257232666016e+00,9.681724756956100464e-02,-1.151676654815673828e+01,9.286565184593200684e-01,1.372128009796142578e+00,-8.834254741668701172e-01,8.233837485313415527e-01,3.427560031414031982e-01,-1.118330597877502441e+00,7.755659520626068115e-02,-4.190358519554138184e-01,2.283195406198501587e-01],
[-3.109177947044372559e-02,-1.548207849264144897e-01,-2.082327753305435181e-01,-8.496211767196655273e-01,3.336730971932411194e-02,4.232794046401977539e-01,-2.711470723152160645e-01,-2.366101980209350586e+00,6.452484428882598877e-02,-1.625767946243286133e-01,2.463179379701614380e-01,9.050551056861877441e-01,-1.037869572639465332e+00,1.138612508773803711e+00,1.748932898044586182e-01,-9.829600155353546143e-02,-5.481494665145874023e-01,-2.678364515304565430e-02,-1.505080889910459518e-02,6.421245932579040527e-01,2.287161052227020264e-01,1.340714693069458008e-01,1.993967413902282715e+00,4.753193855285644531e-01,-1.008808165788650513e-01,6.273909807205200195e-01],
[2.897401526570320129e-02,2.799280583858489990e-01,-1.188197657465934753e-01,-5.558710098266601562e-01,7.280517369508743286e-02,4.351758658885955811e-01,-3.988840878009796143e-01,-3.133533477783203125e+00,4.646518528461456299e-01,-1.985065042972564697e-01,5.712481737136840820e-01,8.711664080619812012e-01,-5.871138572692871094e-01,9.891334772109985352e-01,-9.772281348705291748e-02,-2.097026109695434570e-01,-1.015567660331726074e+00,-1.377626508474349976e-01,-2.576723098754882812e-01,6.486516594886779785e-01,-1.958142518997192383e-01,3.581521809101104736e-01,9.548203945159912109e-01,-2.470722198486328125e-01,2.042667865753173828e-01,-1.756915855407714844e+01],
[-2.627996504306793213e-01,-4.766688644886016846e-01,-2.172158472239971161e-02,1.413179159164428711e+00,7.433652132749557495e-02,2.323326617479324341e-01,-3.921142518520355225e-01,-2.195381641387939453e+00,-1.195112991333007812e+01,-2.443038485944271088e-02,5.050669312477111816e-01,2.243183404207229614e-01,9.684255719184875488e-01,5.235387086868286133e-01,-1.846460253000259399e-01,-4.059069231152534485e-02,-6.880604624748229980e-01,-2.559160888195037842e-01,1.347624063491821289e+00,6.893109083175659180e-01,-5.667195320129394531e-01,3.957267403602600098e-01,2.013038396835327148e+00,1.415498554706573486e-01,1.367497146129608154e-01,-9.109843254089355469e+00],
[-3.513754606246948242e-01,-1.445725083351135254e+00,3.975538015365600586e-01,-1.552791118621826172e+00,-3.403089046478271484e-01,4.571632742881774902e-01,1.636948138475418091e-01,-1.038608908653259277e+00,-1.816047430038452148e+00,3.615078032016754150e-01,7.940471768379211426e-01,2.111735492944717407e-01,5.462245345115661621e-01,1.258495330810546875e+00,6.947228312492370605e-01,-1.557062566280364990e-01,-6.246309280395507812e-01,-8.960503339767456055e-02,-3.598064482212066650e-01,1.183798670768737793e+00,-3.073849201202392578e+00,-1.771882325410842896e-01,-4.610122442245483398e-01,5.598645806312561035e-01,-3.609966039657592773e-01,-3.537487983703613281e+00],
[-1.406220644712448120e-01,-4.163823425769805908e-01,-3.361244499683380127e-02,-4.430555701255798340e-01,-1.648948043584823608e-01,-7.175268977880477905e-02,-2.792493999004364014e-01,2.453828230500221252e-02,-8.636560291051864624e-02,-1.944599859416484833e-02,8.380370214581489563e-03,-9.462908655405044556e-02,6.298772245645523071e-02,-5.213599801063537598e-01,-1.982957310974597931e-02,-3.832952976226806641e-01,-4.112551454454660416e-03,-4.374172911047935486e-02,-2.174996584653854370e-01,-1.854773610830307007e-01,6.882927566766738892e-02,-7.852042466402053833e-02,2.169661521911621094e+00,-2.136397361755371094e-02,-7.708986848592758179e-02,-1.886070705950260162e-02]])

BIAS1 = np.array([[-1.507209688425064087e-01],
[-3.783466100692749023e+00],
[2.694435834884643555e+00],
[-1.672170758247375488e+00],
[-9.231119602918624878e-02],
[8.649022579193115234e-01],
[-1.427282094955444336e-01],
[-6.542967796325683594e+00],
[2.601069450378417969e+00],
[6.498005390167236328e-01],
[2.582041263580322266e+00],
[-2.422844409942626953e+00],
[-1.524400949478149414e+00],
[-2.163704633712768555e-01],
[3.093857049942016602e+00],
[-1.018562838435173035e-01],
[2.644777536392211914e+00],
[3.173961162567138672e+00],
[-1.682446122169494629e+00],
[2.404036283493041992e+00],
[-1.143877220153808594e+01],
[2.912242412567138672e+00],
[1.222891426086425781e+01],
[8.771564364433288574e-01],
[1.732595086097717285e+00],
[2.574345350265502930e+00]])

WEIGHT2 = np.array([[-1.904308199882507324e-01,2.665394246578216553e-01,6.326860189437866211e-02,2.138414978981018066e-01,2.149091809988021851e-01,3.817643225193023682e-01,-1.182443648576736450e-01,2.224185168743133545e-01,3.599396049976348877e-01,1.662769466638565063e-01,-2.646329998970031738e-01,2.752513289451599121e-01,-1.628735661506652832e-02,8.907394856214523315e-02,4.712016880512237549e-02,2.927613854408264160e-01],
[-1.265632510185241699e-01,2.490564823150634766e+00,4.530048370361328125e-01,2.683450281620025635e-01,1.238456010818481445e+00,-9.638577103614807129e-01,-1.190448760986328125e+00,-4.977429211139678955e-01,5.667811632156372070e-01,-5.730745792388916016e-01,-4.043155610561370850e-01,-1.729494810104370117e+00,-4.660367071628570557e-01,-3.765416443347930908e-01,1.213076472282409668e+00,-1.182622611522674561e-01],
[-3.810093700885772705e-01,4.529213428497314453e+00,1.849282741546630859e+00,1.018777847290039062e+00,2.690916061401367188e+00,-1.696593046188354492e+00,-3.078984737396240234e+00,2.592916011810302734e+00,-1.191443562507629395e+00,-2.230657339096069336e+00,1.900425180792808533e-02,-8.248776435852050781e+00,-1.052695035934448242e+00,-1.582496911287307739e-01,-3.154787540435791016e+00,-8.587282180786132812e+00],
[-2.768196761608123779e-01,4.199230670928955078e+00,1.530567646026611328e+00,5.004982948303222656e+00,6.059062480926513672e+00,1.032299846410751343e-01,2.895678520202636719e+00,-2.112157583236694336e+00,1.288373321294784546e-01,-2.590870141983032227e+00,1.460847407579421997e-01,-3.122219562530517578e+00,-5.445402860641479492e-01,-1.139849722385406494e-01,2.703806877136230469e+00,6.836441755294799805e-01],
[2.697707414627075195e-01,-2.840159237384796143e-01,1.082166805863380432e-01,2.851502597332000732e-01,2.621892392635345459e-01,-9.135226160287857056e-02,-5.064049363136291504e-02,2.379352450370788574e-01,-5.579045414924621582e-02,5.582660436630249023e-02,-1.361901909112930298e-01,-1.281319558620452881e-01,-9.808816015720367432e-02,-1.367069873958826065e-02,-8.572753518819808960e-03,-9.385377168655395508e-02],
[-1.462193727493286133e-01,1.996085345745086670e-01,-2.423067808151245117e+00,-4.302089512348175049e-01,3.269279718399047852e+00,5.594276785850524902e-01,-1.979395598173141479e-01,-9.312994480133056641e-01,-1.560141921043395996e+00,2.103035926818847656e+00,8.601088076829910278e-02,2.027381420135498047e+00,-2.825014591217041016e+00,-4.533856809139251709e-01,1.810944199562072754e+00,-3.022590160369873047e+00],
[-2.766028977930545807e-03,-2.105665057897567749e-01,-1.083380207419395447e-01,-1.762492656707763672e-01,-4.018809646368026733e-02,-2.571606934070587158e-01,2.323096394538879395e-01,2.019701451063156128e-01,1.712723672389984131e-01,2.664717435836791992e-01,-1.388643682003021240e-01,-3.005678653717041016e-01,1.479217112064361572e-01,-3.751264140009880066e-02,2.198068425059318542e-02,2.870126366615295410e-01],
[-2.836044132709503174e-01,2.981409549713134766e+00,6.970974206924438477e-01,1.371866226196289062e+00,3.327432274818420410e-01,-1.752070784568786621e+00,-4.336849749088287354e-01,6.821740269660949707e-01,-1.305357962846755981e-01,-1.557152032852172852e+00,-1.577632576227188110e-01,4.601930081844329834e-01,1.654528260231018066e+00,9.231835603713989258e-02,7.999913692474365234e-01,-1.040997982025146484e+00],
[-6.000292897224426270e-01,2.720360994338989258e+00,1.256843209266662598e+00,2.189543008804321289e+00,3.648569345474243164e+00,-2.292620092630386353e-01,2.647900283336639404e-01,1.949829161167144775e-01,3.734232664108276367e+00,-9.188005328178405762e-01,-1.415642052888870239e-01,-2.993832349777221680e+00,-8.030527234077453613e-01,-1.968630254268646240e-01,3.102777481079101562e+00,2.469616085290908813e-01],
[1.557587534189224243e-01,3.842421770095825195e+00,1.443896174430847168e+00,2.687244176864624023e+00,3.369668722152709961e+00,-2.417335271835327148e+00,3.921994268894195557e-01,2.682636737823486328e+00,1.799312591552734375e+00,-1.885167241096496582e+00,-1.772316098213195801e-01,4.792972803115844727e-01,4.836184680461883545e-01,9.361790120601654053e-02,3.243214607238769531e+00,3.057736754417419434e-01],
[-2.486618235707283020e-02,5.009974002838134766e+00,2.429893255233764648e+00,2.781302690505981445e+00,3.229426860809326172e+00,-1.511752963066101074e+00,2.965238690376281738e-01,-2.099332094192504883e+00,1.979070186614990234e+00,-2.371067047119140625e+00,-1.801859587430953979e-01,2.459744215011596680e+00,-6.844882488250732422e+00,1.387398242950439453e-01,-1.986008405685424805e+00,1.359964132308959961e+00],
[-2.236533015966415405e-01,2.223142385482788086e+00,1.271185517311096191e+00,-3.084376454353332520e-01,1.009917259216308594e+00,-1.172442674636840820e+00,-1.005692720413208008e+00,6.583831906318664551e-01,-1.917829036712646484e+00,-1.059732913970947266e+00,-6.828017649240791798e-05,6.544241309165954590e-01,4.969750642776489258e-01,-3.194076418876647949e-01,1.721218466758728027e+00,2.314389467239379883e+00],
[-4.249634146690368652e-01,3.611816883087158203e+00,-1.105139255523681641e+00,1.678506970405578613e+00,3.716239929199218750e+00,1.558532565832138062e-01,-6.102156639099121094e-01,-7.156177163124084473e-01,-1.587356925010681152e+00,8.504195809364318848e-01,1.677623838186264038e-01,-3.329771280288696289e+00,-9.311779141426086426e-01,1.116861701011657715e-01,1.568667441606521606e-01,-2.685208082199096680e+00],
[-2.259872555732727051e-01,3.604195594787597656e+00,-7.106325626373291016e-01,-2.380548000335693359e+00,2.604363679885864258e+00,3.884121477603912354e-01,-1.972421072423458099e-02,-2.287063837051391602e+00,-3.537443161010742188e+00,3.454501032829284668e-01,-3.147231042385101318e-01,-1.017729520797729492e+00,-2.909949541091918945e+00,1.490253359079360962e-01,-2.290740013122558594e+00,7.952814549207687378e-02],
[-2.763857543468475342e-01,3.051842689514160156e+00,-2.434580326080322266e+00,-2.608012437820434570e+00,5.306648612022399902e-01,3.423564508557319641e-02,-1.206593632698059082e+00,-1.163941502571105957e+00,2.309382200241088867e+00,2.231364011764526367e+00,-4.354370534420013428e-01,-2.024251967668533325e-01,-2.210753202438354492e+00,-2.539914660155773163e-02,-2.158603429794311523e+00,1.226238727569580078e+00],
[3.153393864631652832e-01,-8.221956342458724976e-02,2.661114186048507690e-02,-1.819902509450912476e-01,3.015780150890350342e-01,-1.043101102113723755e-01,-1.622640341520309448e-01,1.819442808628082275e-01,4.326468706130981445e-02,2.352478168904781342e-02,-3.452592194080352783e-01,2.434136569499969482e-01,-6.055747345089912415e-02,-2.231024354696273804e-01,-3.446187078952789307e-01,1.170178651809692383e-01],
[1.702443808317184448e-01,-1.094149351119995117e+00,-1.213844180107116699e+00,3.854967951774597168e-01,1.803938865661621094e+00,8.039569258689880371e-01,7.408047914505004883e-01,5.035626292228698730e-01,3.546285033226013184e-01,6.815054416656494141e-01,-4.065822064876556396e-01,-5.148261785507202148e-01,4.059103429317474365e-01,-3.648147732019424438e-02,-1.514669179916381836e+00,-1.380800902843475342e-01],
[1.046525016427040100e-01,1.868468999862670898e+00,1.210735678672790527e+00,1.508379936218261719e+00,2.636656999588012695e+00,-2.644244670867919922e+00,1.587803006172180176e+00,-9.316143989562988281e-01,8.132898807525634766e-01,-8.748754858970642090e-01,-3.620167076587677002e-01,8.209128975868225098e-01,2.122855186462402344e+00,-5.326172113418579102e-01,-5.069062709808349609e-01,2.322921603918075562e-01],
[-1.921633929014205933e-01,4.623956680297851562e+00,9.696968197822570801e-01,-2.678842782974243164e+00,-3.637104062363505363e-03,-2.057607650756835938e+00,1.143774032592773438e+00,1.385321021080017090e-01,2.062162399291992188e+00,-7.229160070419311523e-01,-2.740263380110263824e-02,-1.781477808952331543e+00,-3.904932498931884766e+00,-4.006003439426422119e-01,3.820915937423706055e+00,6.460094451904296875e-01],
[2.926664650440216064e-01,2.331505060195922852e+00,-1.072095990180969238e+00,-2.497975826263427734e-01,2.385213851928710938e+00,8.417290449142456055e-01,-5.810896754264831543e-01,1.647724956274032593e-01,-2.497678041458129883e+00,7.509210109710693359e-01,1.860101521015167236e-01,-8.145473003387451172e-01,-6.561037153005599976e-02,-2.274665981531143188e-01,-4.506277084350585938e+00,-3.217564582824707031e+00],
[4.209076985716819763e-02,3.557307958602905273e+00,-1.728405356407165527e+00,-1.108451604843139648e+00,8.394244909286499023e-01,-3.892449378967285156e+00,3.267603740096092224e-02,-2.909568548202514648e+00,5.880095958709716797e-01,2.914622239768505096e-02,2.806787565350532532e-02,8.327525258064270020e-01,5.849649310111999512e-01,-3.109513819217681885e-01,2.839260816574096680e+00,-7.672135829925537109e-01],
[3.091206774115562439e-02,-3.614255487918853760e-01,-3.004450559616088867e+00,-1.522643923759460449e+00,-3.100028991699218750e+00,1.398490071296691895e+00,2.172562599182128906e+00,-8.600276947021484375e+00,1.402476191520690918e+00,2.233354330062866211e+00,-2.273503243923187256e-01,1.746553540229797363e+00,3.160835742950439453e+00,-2.202961593866348267e-01,-5.003457546234130859e+00,3.567107439041137695e+00],
[-3.721771836280822754e-01,-2.718190193176269531e+00,-3.569602733477950096e-03,-5.095248222351074219e-01,-1.944222092628479004e+00,-2.024678047746419907e-03,-4.657956063747406006e-01,-1.711661219596862793e-01,-7.146964669227600098e-01,1.926045678555965424e-02,-5.505924224853515625e-01,-2.316721528768539429e-01,-3.439566195011138916e-01,-3.822014331817626953e-01,-1.245985507965087891e+00,-3.530525267124176025e-01],
[-1.255641579627990723e-01,4.250953197479248047e+00,-9.135274291038513184e-01,-1.959093093872070312e+00,1.091406941413879395e+00,6.225882768630981445e-01,-7.704820632934570312e-01,7.389538288116455078e-01,-4.369394481182098389e-01,9.022223949432373047e-01,-3.284809589385986328e-01,7.752584218978881836e-01,1.197306156158447266e+00,-2.360179573297500610e-01,2.645668983459472656e+00,6.446518898010253906e-01],
[1.508943270891904831e-02,5.958981513977050781e+00,-3.009960889816284180e+00,-2.789209365844726562e+00,7.906053543090820312e+00,1.123043417930603027e+00,2.171235799789428711e+00,9.837291240692138672e-01,3.456648588180541992e+00,2.148273706436157227e+00,1.502513289451599121e-01,2.360594987869262695e+00,1.397525191307067871e+00,-1.281441003084182739e-01,-3.043639421463012695e+00,-1.009974360466003418e+00],
[1.453450322151184082e-01,6.584487438201904297e+00,2.635686874389648438e+00,2.054235935211181641e+00,2.922305583953857422e+00,-3.067006826400756836e+00,3.249032974243164062e+00,-1.734242796897888184e+00,-4.456393048167228699e-02,-2.735380411148071289e+00,4.225847870111465454e-02,1.996762514114379883e+00,8.470538258552551270e-01,1.639473140239715576e-01,3.811058998107910156e+00,-2.346330404281616211e+00]])
BIAS2 = np.array([[-2.758834362030029297e-01],
[-3.776672124862670898e+00],
[7.922867774963378906e+00],
[-3.811931014060974121e-01],
[-3.099622964859008789e+00],
[6.199230670928955078e+00],
[5.157693102955818176e-02],
[7.584542781114578247e-02],
[-9.890502095222473145e-01],
[6.480660438537597656e+00],
[-2.154053151607513428e-01],
[-3.334288835525512695e+00],
[1.481061428785324097e-01],
[-2.153455317020416260e-01],
[-3.532724857330322266e+00],
[-2.154534578323364258e+00]])

WEIGHT3 = np.array([[3.847621977329254150e-01,-3.485910594463348389e-01,2.425701618194580078e-01,-3.265377581119537354e-01,-2.137274295091629028e-02,-1.200350821018218994e-01,-6.988333910703659058e-02,-7.692525535821914673e-02],
[-1.201740372925996780e-02,1.660258322954177856e-01,-2.642391622066497803e-01,-3.283903747797012329e-02,3.731028139591217041e-01,6.685205549001693726e-02,-7.097281813621520996e-01,3.194603621959686279e-01],
[-4.547412693500518799e-01,-3.808035552501678467e-01,-5.820594429969787598e-01,-5.541129112243652344e-01,8.636296540498733521e-02,-7.718294858932495117e-01,-7.895101308822631836e-01,-1.324273586273193359e+00],
[-9.195102611556649208e-04,-3.603378683328628540e-02,-4.201681539416313171e-02,-9.077622741460800171e-02,4.940108954906463623e-02,-3.542627692222595215e-01,-4.243254959583282471e-01,4.011838696897029877e-03],
[-5.319949612021446228e-02,-2.581947743892669678e-01,-1.054334733635187149e-02,-2.320010811090469360e-01,1.354024112224578857e-01,-1.900433152914047241e-01,-7.095129787921905518e-02,-3.094819560647010803e-02],
[1.796620711684226990e-02,1.701724529266357422e-02,-2.769632041454315186e-01,-3.533870875835418701e-01,-8.374756574630737305e-02,-6.105557084083557129e-01,7.726696878671646118e-02,-6.558420658111572266e-01],
[-5.685064196586608887e-01,-2.218401134014129639e-01,-1.036976501345634460e-01,-2.675758004188537598e-01,-1.952592879533767700e-01,-4.786881208419799805e-01,5.548877716064453125e-01,-3.026041984558105469e-01],
[-9.380558878183364868e-02,-9.547350555658340454e-02,-2.168236821889877319e-01,-1.764667332172393799e-01,9.545619040727615356e-02,-5.575903058052062988e-01,-1.639694869518280029e-01,-4.556700289249420166e-01],
[-3.270386755466461182e-01,-8.590617179870605469e-01,-2.007503062486648560e-02,-4.075953662395477295e-01,-3.074159622192382812e-01,-2.774993479251861572e-01,1.925755143165588379e-01,-6.297351717948913574e-01],
[-7.131479382514953613e-01,-1.215227097272872925e-01,-1.030646681785583496e+00,-8.843333125114440918e-01,-2.261555641889572144e-01,-8.982118368148803711e-01,8.110028505325317383e-02,-8.948867917060852051e-01],
[4.749717190861701965e-03,-2.715906202793121338e-01,4.174514114856719971e-01,-1.032455414533615112e-01,1.438645422458648682e-01,-2.201583683490753174e-01,-2.710883021354675293e-01,-1.062876880168914795e-01],
[-1.161730363965034485e-01,-4.111152887344360352e-01,-3.756596446037292480e-01,-2.091475427150726318e-01,-1.483417004346847534e-01,-3.041101098060607910e-01,-8.395108580589294434e-02,-5.475960373878479004e-01],
[-3.955662250518798828e-01,-6.549431681632995605e-01,-5.861954092979431152e-01,-2.113758921623229980e-01,-1.682432442903518677e-01,-1.549527198076248169e-01,6.728982925415039062e-02,-2.958499193191528320e-01],
[-4.826511442661285400e-01,2.130268886685371399e-02,-2.249385565519332886e-01,1.009278446435928345e-01,8.533925563097000122e-02,2.720328867435455322e-01,1.890493333339691162e-01,-3.562653362751007080e-01],
[-4.610491544008255005e-02,1.475732624530792236e-01,-4.020162820816040039e-01,9.683432872407138348e-04,3.181275427341461182e-01,-1.672121733427047729e-01,-1.448817849159240723e+00,-1.643399596214294434e-01],
[-1.985086053609848022e-01,-1.371050775051116943e-01,-2.154129892587661743e-01,-2.966549992561340332e-01,-8.149056136608123779e-02,-2.782530188560485840e-01,1.554946452379226685e-01,-5.257448554039001465e-01]])
BIAS3 = np.array([[-2.242930650711059570e+00],
[-3.271122694015502930e+00],
[-1.264598846435546875e+00],
[-1.506404042243957520e+00],
[7.518038749694824219e-01],
[-5.164434432983398438e+00],
[-1.303951591253280640e-01],
[-2.504295110702514648e+00]])

WEIGHT4 = np.array([[-3.783443709835410118e-03],
[-6.661333888769149780e-02],
[2.477558702230453491e-02],
[-1.475128680467605591e-01],
[-4.788349941372871399e-02],
[7.828725501894950867e-03],
[5.344859883189201355e-02],
[-1.122524887323379517e-01]])
BIAS4 = np.array([1.912913098931312561e-02])

WEIGHTS = [WEIGHT1, WEIGHT2, WEIGHT3, WEIGHT4]
BIASES = [BIAS1, BIAS2, BIAS3, BIAS4]

# Creating the model
model = Sequential([
    Dense(64, activation='relu', input_shape=(32,)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(4, activation='linear'),
])

# Loading all weight and Bias
for i in range(len(WEIGHTS)):
    # Reshaping the biases
    BIASES[i] = BIASES[i].reshape(BIASES[i].shape[0])

    model.layers[i].set_weights([WEIGHTS[i], BIASES[i]])
    
def convert_to_numpy(state):
    """
    state looks like [[{0,1,2,3}, {12,13,14,15}]]
    """
    boards = state.board
    numpy_board = np.zeros((1, 2*4*4))
    numpy_board.fill(-1)
    
    for i,board in enumerate(boards):
        for j,col in enumerate(board):
            for k,pawn in enumerate(col):
                numpy_board[0,i*8 + j*4 + k] = pawn

    return numpy_board

# IDEA: I can use the UCTAgent class as a base class for my AI class. And tweak the move selection algorithm to fit my needs.

class Node:
    """Node Class

    A node in the MCTS tree.

    Attributes:
        parent (Node): The parent node of this node.
        state (ShobuState): The game state represented by this node.
        U (int): The total reward of the node. 
        N (int): The number of times the node has been visited.
        children (dict[Node, ShobuAction]): A dictionary mapping child nodes to their corresponding actions that lead to the state they represent.
    """
    def __init__(self, parent, state):
        """Initializes a new Node object.

        Args:
            parent (Node): The parent node of this node.
            state (ShobuState): The game state represented by this node.
        """
        self.parent = parent
        self.state = state
        self.U = 0
        self.N = 0
        self.children = {}
        
class AI2(Agent):
    """An agent that plays following your algorithm.

    This agent extends the base Agent class, providing an implementation your agent.

    Attributes:
        player (int): The player id this agent represents.
        game (ShobuGame): The game the agent is playing.
    """
    def __init__(self, player, game, debugging=False):
        super().__init__(player, game)
        self.i = 0
        self.offset = 0
        self.lastvalue = 0.5
        self.coup = 0
        self.max_depth = 3
        if self.player == 1:
            self.offset = 1
        
        self.debugging = debugging
        
        if debugging:                
            plt.ion()
            self.fig = plt.figure()
            self.ax = self.fig.add_subplot(111)
            self.x = [0]
            self.y = [0]
            self.line1, = self.ax.plot(self.x, self.y)
            
            # setting labels
            plt.xlabel("X-axis")
            plt.ylabel("Y-axis")
            plt.title(f"Our basic AI playing for {self.player}")
            plt.xlim(0, 40)
            plt.grid()
            plt.ylim(0, 1)

    def play(self, state, remaining_time):
        """Determines the next action to take in the given state.

        Args:
            state (ShobuState): The current state of the game.
            remaining_time (float): The remaining time in seconds that the agent has to make a decision.

        Returns:
            ShobuAction: The chosen action.
        """
        possible_actions = self.game.actions(state)
        value_actions = []
        turn = self.i*2 + self.offset
        self.i += 1
        duration = 0
        #start = time.time()

        val, action = self.max_value(state, -float("inf"), float("inf"), 0)
        print(val)
        return action

        for action in possible_actions:

            #if self.coup == 0 and self.player == 0  and action == (0,0,1,0,5,1):
            #    self.coup = 1
            #    return action

            # 10% of the remaining time to be careful
            if duration * 10 > remaining_time:
                break
            
            new_state = self.game.result(state, action)

            if self.game.is_terminal(new_state):
                return action
            
            numpy_state = convert_to_numpy(new_state)
            numpy_state = np.append(numpy_state, turn)
            numpy_state = numpy_state.reshape(1, -1)

            value_neural = model.predict(numpy_state, verbose=0)

            value_heuristic = self.evaluate(new_state) 
            print(value_heuristic)
            
            value = 0.1*value_neural + 0.9*value_heuristic
            
            if self.player == 1:
                if value*0.9 > self.lastvalue:
                    self.lastvalue = value
                    return action
            if self.player == 0:
                if value*1.1 < self.lastvalue:
                    self.lastvalue = value
                    return action
            value_actions.append(value)
            duration = time.time() - start
        
        if len(value_actions) == 0:
            # In case we didn't have time to even compute 1 action
            value_actions = [0]
        
        # Choose the action with the highest value
        # We are playing black and AI was trained to play black
        if self.player != 1:
            value_actions = 1 - np.array(value_actions)
        value_actions = np.array(value_actions)
        best_action = possible_actions[np.argmax(value_actions)]
        
        if self.debugging:
            # Update the plot
            self.x.append(self.i)
            self.y.append(np.max(value_actions))
            
            self.line1.set_xdata(self.x)
            self.line1.set_ydata(self.y)
            
            # re-drawing the figure
            self.fig.canvas.draw()
            
            # to flush the GUI events
            self.fig.canvas.flush_events()
        
        return best_action

    def evaluate(self, state):
        """Computes a heuristic value for the given state.

        Args:
            state (ShobuState): The state to evaluate.

        Returns:
            float: The heuristic value of the state.
        """
        
        def lost(state):
            possible_actions = self.game.actions(state)
            for action in possible_actions:
                new_state = self.game.result(state, action)
                if self.game.is_terminal(new_state):
                    return True
            return False
        
    

        def count_min_pieces(self, state):
            """Evaluates the given state and returns a score from the perspective of the agent's player.

            Args:
                state (ShobuState): The game state to evaluate.

            Returns:
                float: The evaluated score of the state.
            """
            joueur = self.player
            adversaire = 1 - self.player
            min_joueur = 10
            min_adversaire = 10
            for board in state.board:
                min_joueur = min(min_joueur, len(board[self.player]))
                min_adversaire = min(min_adversaire, len(board[adversaire]))

            if min_adversaire == 0:
                return self.player
            
            return  (((min_joueur - min_adversaire)/(min_joueur + min_adversaire)) + 1)/2

        def count_pieces(self, state):
            """Evaluates the given state and returns a score from the perspective of the agent's player.

            Args:
                state (ShobuState): The game state to evaluate.

            Returns:
                float: The evaluated score of the state.
            """
            joueur = self.player
            adversaire = 1 - self.player
            joueur_score = 0
            adversaire_score = 0
            for board in state.board:
                joueur_score += len(board[self.player])
                adversaire_score += len(board[adversaire])
            return  (((joueur_score - adversaire_score)/(joueur_score + adversaire_score)) + 1)/2 

                   
        if lost(state):
            return 1 - self.player
    
        if self.player != 1:
            toreturn =  1 - (0.2*count_pieces(self, state) + 0.8*count_min_pieces(self, state))
        else:
            toreturn = 0.2*count_pieces(self, state) + 0.8*count_min_pieces(self, state)

        return toreturn

    
class AI(Agent):


    def __init__(self, player, game, debugging=False):

        super().__init__(player, game)
        self.i = 0
        self.offset = 0
        self.lastvalue = 0.5
        self.coup = 0
        self.max_depth = 2
        if self.player == 1:
            self.offset = 1
        
        self.debugging = debugging
        
        if debugging:                
            plt.ion()
            self.fig = plt.figure()
            self.ax = self.fig.add_subplot(111)
            self.x = [0]
            self.y = [0]
            self.line1, = self.ax.plot(self.x, self.y)
            
            # setting labels
            plt.xlabel("X-axis")
            plt.ylabel("Y-axis")
            plt.title(f"Our basic AI playing for {self.player}")
            plt.xlim(0, 40)
            plt.grid()
            plt.ylim(0, 1)

    def play(self, state, remaining_time):

        possible_actions = self.game.actions(state)
        for action in possible_actions:
            new = self.game.result(state, action)
            if self.game.is_terminal(new):
                return action

        return self.alpha_beta_search(state)
    
    def is_cutoff(self, state, depth):

        return depth >= self.max_depth or self.game.is_terminal(state)
    
    def eval(self, state):
        joueur = self.player
        adversaire = 1 - self.player
        
        def lost(state):
            possible_actions = self.game.actions(state)
            for action in possible_actions:
                new_state = self.game.result(state, action)
                if self.game.is_terminal(new_state):
                    return True
            return False
        
    

        def count_min_pieces(self, state):

            joueur = self.player
            adversaire = 1 - self.player
            min_joueur = 10
            min_adversaire = 10
            for board in state.board:
                min_joueur = min(min_joueur, len(board[self.player]))
                min_adversaire = min(min_adversaire, len(board[adversaire]))

            if min_adversaire == 0:
                return self.player
            
            return  (((min_joueur - min_adversaire)/(min_joueur + min_adversaire)) + 1)/2

        def count_pieces(self, state):

            joueur = self.player
            adversaire = 1 - self.player
            joueur_score = 0
            adversaire_score = 0
            for board in state.board:
                joueur_score += len(board[self.player])
                adversaire_score += len(board[adversaire])
            return  (((joueur_score - adversaire_score)/(joueur_score + adversaire_score)) + 1)/2 

        """
        AI 
        
        
        numpy_state = convert_to_numpy(state)
        reward_boards = model.predict(numpy_state, verbose=0)
        # Perhaps need to take better decision ?
        # The values are positive if it's black playing
        if joueur != 1:
            reward_boards = - reward_boards
        return np.sum(reward_boards)
        """   
        if lost(state):
            return -100
    

        toreturn = 0.2*count_pieces(self, state) + 0.8*count_min_pieces(self, state)

        return toreturn



    def alpha_beta_search(self, state):

        _, action = self.max_value(state, -float("inf"), float("inf"), 0)
        print(_)
        return action

    def max_value(self, state, alpha, beta, depth):

        if self.is_cutoff(state, depth):
            return self.eval(state), None
        value = -float("inf")
        best_action = None
        for action in self.game.actions(state):
            value2, action2 = self.min_value(self.game.result(state, action), alpha, beta, depth + 1)
            if value2 > value:
                value = value2
                best_action = action
            if value >= beta:
                beta = value
        return value, best_action
        


    def min_value(self, state, alpha, beta, depth):

        if self.is_cutoff(state, depth):
            return self.eval(state), None
        value = float("inf")
        best_action = None
        for action in self.game.actions(state):
            value2, action2 = self.max_value(self.game.result(state, action), alpha, beta, depth + 1)
            if value2 < value:
                value = value2
                best_action = action
            if value <= alpha:
                alpha = value
        return value, best_action
    
